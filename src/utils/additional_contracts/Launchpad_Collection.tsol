// pragma ever-solidity >=0.61.2;

// pragma AbiHeader expire;
// pragma AbiHeader time;
// pragma AbiHeader pubkey;

// import "@broxus/tip4/contracts/interfaces/IAcceptNftBurnCallback.tsol";
// import "@broxus/tip4/contracts/interfaces/IBurnableCollection.tsol";

// import "@broxus/tip4/contracts/access/OwnableInternal.tsol";
// import "@broxus/tip4/contracts/TIP4_2/TIP4_2Collection.tsol";
// import "@broxus/tip4/contracts/TIP4_3/TIP4_3Collection.tsol";

// import "./Nft.tsol";

// contract Launchpad_Collection is TIP4_2Collection, TIP4_3Collection, IBurnableCollection, OwnableInternal {
//   uint64 static nonce;
  
//   uint8 constant value_is_less_than_required = 104;
  
//   uint128 remainOnNft;
//   uint128 remainOnContract = 0.2 ever;
//   uint128 max_supply;

//   string public json_format;
//   uint256 public mint_counter = 0;

//   constructor(
//     TvmCell codeNft,
//     TvmCell codeIndex,
//     TvmCell codeIndexBasis,
//     address owner,
//     uint128 _remainOnNft,
//     string json,
//     uint128 max_supply_
//   )
//     public
//     OwnableInternal(owner)
//     TIP4_1Collection(codeNft)
//     TIP4_2Collection(json)
//     TIP4_3Collection(codeIndex, codeIndexBasis)
//   {
//     tvm.rawReserve(remainOnContract, 0);
//     remainOnNft = _remainOnNft;
//     max_supply = max_supply_;

//     owner.transfer({value:0, flag: 128, bounce: false});
//   }

//   function codeDepth() public view returns (uint16) {
//     return (_buildNftCode(address(this)).depth());
//   }

//   // function mint(address metadata_holder_addr, address launchpad_addr) public virtual {
//   //   require(msg.value > remainOnNft, value_is_less_than_required);

//   //   tvm.rawReserve(0.5 ever, 0);
    
//   //   uint256 id = uint256(_totalSupply);

//   //   if(max_supply > 0) {
//   //     require(_totalSupply <= max_supply, 101);
//   //   }

//   //   MetadataHolder(metadata_holder_addr).get_mapped_data_index{value: 0.2 ever, callback: Launchpad_Collection._mintNft}
//   //   (mint_counter, launchpad_addr, msg.sender);

//   //   mint_counter++;

//   //   // msg.sender.transfer({value:0, flag: 128, bounce: false});
//   // }

//   function _mintNft(address owner, string json, uint128 value, uint16 flag) public {
//     json_format = json;
//     uint256 id = uint256(_totalSupply);
//     _totalSupply++;
  
//     TvmCell codeNft = _buildNftCode(address(this));
//     TvmCell stateNft = _buildNftState(codeNft, id);

//     address nftAddr = new Nft{ stateInit: stateNft, value: value, flag: flag }(
//       owner,
//       owner,
//       remainOnNft,
//       json,
//       _codeIndex,
//       _indexDeployValue,
//       _indexDestroyValue
//     );

//     emit NftCreated(id, nftAddr, owner, owner, msg.sender);
//   }

//   function totalMinted() external view responsible returns (uint256 count) {
//     return { value: 0, flag: 64, bounce: false } (_totalSupply);
//   }

//   function setRemainOnNft(uint128 _remainOnNft) external virtual onlyOwner {
//     remainOnNft = _remainOnNft;
//   }
  
//   function _buildNftState(
//     TvmCell code,
//     uint256 id
//   ) internal pure virtual override(TIP4_2Collection, TIP4_3Collection) returns (TvmCell) {
//     return tvm.buildStateInit({ contr: Nft, varInit: { _id: id }, code: code });
//   }

//   function resolveIndexCodeHash(address collection, address owner) public view returns (uint256 hash) {
//     TvmCell code = _buildIndexCode(collection, owner);
//     return tvm.hash(code);
//   }

//   function acceptNftBurn(
//     uint256 _id,
//     address _owner,
//     address _manager,
//     address _sendGasTo,
//     address _callbackTo,
//     TvmCell _callbackPayload
//   ) external override {
//     require(msg.sender.value != 0 && _resolveNft(_id) == msg.sender, 100);

//     _totalSupply--;
//     emit NftBurned(_id, msg.sender, _owner, _manager);

//     if (_callbackTo.value != 0) {
//       IAcceptNftBurnCallback(_callbackTo).onAcceptNftBurn{ value: 0, flag: 64 + 2, bounce: false }(
//         address(this),
//         _id,
//         msg.sender,
//         _owner,
//         _manager,
//         _sendGasTo,
//         _callbackPayload
//       );
//     } else {
//       _sendGasTo.transfer({ value: 0, flag: 64 + 2, bounce: false });
//     }
//   }
// }
